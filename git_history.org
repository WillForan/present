#+TITLE: Rewriting History
#+REVEAL_THEME: dracula
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_EXTRA_SCRIPTS: ("https://code.jquery.com/jquery-3.7.1.min.js" "https://www.xn--4-cmb.com/rpoll/poll.js" "https://cdn.jsdelivr.net/npm/reveal.js-plugins@latest/audio-slideshow/plugin.js" "https://cdn.jsdelivr.net/npm/reveal.js-plugins@latest/audio-slideshow/recorder.js" "https://cdnjs.cloudflare.com/ajax/libs/RecordRTC/5.6.2/RecordRTC.js" "https://cdn.jsdelivr.net/npm/reveal.js-plugins@latest/anything/plugin.js" "https://cdn.jsdelivr.net/npm/reveal.js-plugins@latest/customcontrols/plugin.js")
#+REVEAL_EXTRA_CSS: https://www.xn--4-cmb.com/rpoll/poll.css
#+REVEAL_HIGHLIGHT_CSS_IGNORE: reveal.js/plugin/highlight/monokai.css
#+PROPERTY: HEADER-ARGS+ :eval no-export
#+OPTIONS:  toc:nil
* frontmatter :noexport:
** emacs
setup reveal.js
#+begin_src elisp :results none
; 20250202  org-re-reveal didn't work. install from mela with oer-reveal (but not loaded?) and does work,
(use-package org-re-reveal :ensure t) ; fork of org-reveal
(use-package oer-reveal :ensure t) ; export backend -- doesn't work? above does?
(setq org-reveal-root "/home/foranw/src/work/present/reveal.js/")
(setq oer-reveal-plugin-4-config "") ; remove RevealAudio

(setq org-babel-R-command "R --slave --no-save --vanilla")
#+end_src

org capture into
#+begin_src elisp :results none
(setq-local org-download-image-dir "./git/")
#+end_src


*** adding fragments to src
#+begin_src  :eval never :resutls none
(defun org-re-reveal-fixed-width (fixed-width _contents _info)
  "Transcode a FIXED-WIDTH element from Org to HTML.
CONTENTS is nil.  INFO is a plist holding contextual information."
  (message "hi!")
  (let* ((attr-html (org-export-read-attribute :attr_html fixed-width))
         (attr-string (if attr-html
                          (concat
                           " " (org-html--make-attribute-string attr-html))
                        ""))
         (label (let ((lbl (org-element-property :name fixed-width)))
                    (if (not lbl) ""
                      (format " id=\"%s-results\"" lbl))))
         (pre-tag (format "<pre %s%s>"
                          (if attr-html attr-string)
                          label)))
    (format "%s\n%s</pre>" pre-tag (org-html-do-format-code
                                    (org-remove-indentation
                                     (org-element-property :value fixed-width))))))
#+end_src
** browser
for firefox open about:config and set security.fileuri.strict to false
** reveal.js
#+begin_src bash :results none
test -d reveal.js/  && exit 0
[ ! -r reveal.js.zip ] && wget https://github.com/hakimel/reveal.js/archive/master.zip -O reveal.js.zip
unzip reveal.js.zip # reveal.js-master/{dist,plugin}
mv reveal.js-master reveal.js
#+end_src

#+begin_src bash :results none
test -r oer-reveal || git clone https://gitlab.com/oer/oer-reveal
test -r org-re-reveal || git clone git@gitlab.com:will.foran/org-re-reveal.git
#+end_src


** poll
git@github.com:jschildgen/reveal.js-poll-plugin.git added to https://www.xn--4-cmb.com/rpoll
where poll.js was modified

use like

#+begin_html
<div class="poll fragment" style="bottom:50px">
 <h1>What is the question?</h1>
 <ul>
   <li>Wrong answer</li>
   <li data-poll="correct">Correct answer</li>
 </ul>
 <h2></h2>
</div>
#+end_html


Or with ~#+REVEAL_HTML:~?

#+MACRO: mpoll #+REVEAL_HTML:<div class="poll fragment $5" $3 style="position: relative; right: auto; bottom: auto; width: auto; $4"> <h1>$1</h1> <ul>$2</ul> <h2></h2> </div>

** noweb git

=<<git_init>>= is placeholder for

#+NAME: git_init
#+begin_src bash :results none :eval never
EDITOR=":"
GTMP=/tmp/mygit-1
mkdir -p ${GTMP}
cd ${GTMP}
! test -r .git && git init
#+end_src


=<<git_reset>>= is

#+NAME: git_reset
#+begin_src bash :noweb yes :eval never
GTMP=/tmp/mygit-1
test -r $GTMP && rm -r $GTMP
<<git_init>>
#+end_src


* Rewrite history
Bring your computer! Myapps to rhea if windows.

https://www.xn--4-cmb.com/rpoll

{{{mpoll(polling..., <li>yes!</li><li>not again</li>)}}}

* Take home

#+begin_quote
The past was erased, the erasure was forgotten, the lie became the truth.
#+end_quote

#+begin_src bash :eval never
git add myfile.txt
git commit -v
vim myfile.txt # opps. fix a typo
git add myfile
git commit --amend --no-edit
#+end_src

https://happygitwithr.com/workflows-intro

* git review
add, commit (, push) cycle
#+begin_src bash :eval never
git init # once, creates .git/

date > myfile.txt

git add myfile.txt
git commit -m "new date in myfile"
# git push -- not today. all local

date > myfile.txt # change file
git add myfile.txt
git commit -m "new date in myfile"
#+end_src

* local setup

In a terminal, go to temp and start a new directory
#+begin_src bash :eval never
cd /tmp
mkdir gittest
cd gittest
#+end_src

{{{mpoll(What comes next,
  <li>git init</li>
  <li>git add</li>
  <li>git diff</li>
  <li>git status</li>, data-fragment-index=2)}}}

#+ATTR_REVEAL: :frag t :data-fragment-index 3
#+begin_src bash :eval never
git init
#+end_src

** Add
#+begin_src bash :session git1 :noweb yes :results none :exports none
<<git_reset>>
#+end_src

What's status of our new repo?
#+begin_src bash :session git1 :results verbatim :exports both :dir /tmp/mygit-1
date > myfile.txt
git add myfile.txt

git status
#+end_src

#+ATTR_REVEAL: :frag t :frag_idx 1
#+RESULTS:
: On branch main
:
: No commits yet
:
: Changes to be committed:
:   (use "git rm --cached <file>..." to unstage)
: 	new file:   myfile.txt

{{{mpoll(added a file -- what next?,
  <li data-poll="correct">git commit</li>
  <li>git push</li>
  <li>git diff</li>
  <li>git init</li>, data-fragment-index=2)}}}


** Commit
After ~add~
#+begin_src bash :session git1 :results none
git commit -v # launch editor       OR
git commit -m "date change in myfile"
#+end_src



#+DOWNLOADED: screenshot @ 2025-02-24 16:43:47
#+REVEAL_HTML: <div class="column" style="float:left; width:50%">
#+ATTR_HTML: :width 300px
[[file:git/commit_vim.png]]
@@html: <small>@@ ~i~ to write ~esc :wq~ to save @@html: </small>@@

#+REVEAL_HTML: </div><div class="column" style="float:right; width:50%">
#+ATTR_HTML: :width 300px
[[file:git/commit_nano.png]]

@@html: <small>@@ write ~Ctrl+w~ to save; ~Ctrl+x~ @@html: </small>@@
#+REVEAL_HTML: </div>

** log
#+begin_src bash :session git1 :results verbatim :exports both
git log --oneline
#+end_src

#+ATTR_REVEAL: :frag t :data-fragment-index 1
#+RESULTS:
: a4a07b1 (HEAD -> main) date change in myfile


{{{mpoll(log results, <li>empty</li><li>line per commit (one line)</li><li>line per add (many)</li>,data-fragment-index=2)}}}

* Update a file

#+begin_src bash :session git1 :results verbatim :exports both
date > myfile.txt
git diff
#+end_src

#+RESULTS:
: diff --git a/myfile.txt b/myfile.txt
: index 9fc4392..3d01116 100644
: --- a/myfile.txt
: +++ b/myfile.txt
: @@ -1 +1 @@
: -Mon Feb 24 07:10:38 PM EST 2025
: +Mon Feb 24 07:14:52 PM EST 2025

** Update git
Changed a file, now what

#+ATTR_REVEAL: :frag t :data-fragment-index 2
#+begin_src bash :session git1 :results verbatim :exports both :results none
git add myfile.txt
#+end_src


#+ATTR_REVEAL: :frag t :data-fragment-index 3
#+begin_src bash :session git1 :results verbatim :exports both
git commit -m 'oops wrong date, updated again'
#+end_src

#+ATTR_REVEAL: :frag t :data-fragment-index 3
#+RESULTS:
: [main d316b4f] oops wrong date, updated again
:  1 file changed, 1 insertion(+), 1 deletion(-)

{{{mpoll(how to track change: git, <li>init + commit</li><li>add + commit</li><li>status + add</li><li>add + push</li>,data-fragment-index=1)}}}

** log

#+begin_src bash :session git1 :results verbatim :exports both
git log --oneline
#+end_src

#+ATTR_REVEAL: :frag t :data-fragment-index 1
#+RESULTS:
: d316b4f (HEAD -> main) oops wrong date, updated again
: a4a07b1 date change in myfile


{{{mpoll(log results #2, <li>empty</li><li>one history = one line</li><li>2 commits=2 lines</li>,data-fragment-index=2)}}}

* Once more!
** add, commit
#+REVEAL_MARGIN: 0
#+REVEAL_MAX_SCALE: 2

#+REVEAL_HTML: <div class="column" style="float:left; width:33%; font:smaller">

@@html: <br> <br> @@
  #+ATTR_REVEAL: :frag t :frag_idx 2
  #+begin_src bash :session git1 :results none
  echo NODATE > myfile.txt
  #+end_src

  #+ATTR_REVEAL: :frag t :frag_idx 4
  #+begin_src bash :session git1 :results none
  git add myfile.txt
  #+end_src

  #+ATTR_REVEAL: :frag t :frag_idx 6
  #+begin_src bash :session git1 :results none
  git commit -m "remove date"
  #+end_src


#+REVEAL_HTML: </div><div class="column" style="float:left; width:33%; font-size:smaller; overflow: scroll">

  #+begin_src bash :session git1 :exports both
  cat myfile.txt
  #+end_src
  #+RESULTS:
  : Mon Feb 24 07:14:52 PM EST 2025


  #+ATTR_REVEAL: :frag fade-up :frag_idx 3
  #+begin_src bash :session git1 :exports both
  cat myfile.txt
  #+end_src
  #+ATTR_REVEAL: :frag fade-up :frag_idx 3
  #+RESULTS:
  : NODATE

#+REVEAL_HTML: </div><div class="column" style="float:left; width:33%; font-size:smaller">

  #+ATTR_REVEAL: :frag t :frag_idx 1
  #+begin_src bash :session git1 :exports both
  git show HEAD:myfile.txt
  #+end_src
  #+ATTR_REVEAL: :frag t :frag_idx 1
  #+RESULTS:
  : Mon Feb 24 07:14:52 PM EST 2025

@@html: <br> <br> <br> @@

  #+ATTR_REVEAL: :frag fade-up :frag_idx 7
  #+begin_src bash :session git1 :exports both
  git show HEAD:myfile.txt
  #+end_src
  #+ATTR_REVEAL: :frag fade-up :frag_idx 7
  #+RESULTS:
  : NODATE

#+REVEAL_HTML: </div><div style=clear:both;height:100px>

{{{mpoll(<tt>'echo &gt;'</tt> changes,
   <li>nothing</li><li>file (cat)</li><li>git HEAD</li><li>file and HEAD</li>,
   data-fragment-index=2,
   position: absolute; bottom: -100,
   fade-in-then-out)}}}

{{{mpoll(<tt>diff</tt> shows,
   <li>nothing to diff yet</li><li>NODATE (against HEAD)</li><li>nothing b/c HEAD==file</li>,
   data-fragment-index=3,
   position: absolute; bottom: -10,
   fade-in-then-out)}}}

{{{mpoll(<tt>add</tt> changes,
   <li>neither</li><li>file (cat)</li><li>git HEAD</li><li>file and HEAD</li>,
   data-fragment-index=4,
   position: absolute; bottom: -10,
   fade-in-then-out)}}}


{{{mpoll(<tt>diff</tt> after add,
   <li>nothing new to diff</li><li>NODATE (against HEAD)</li><li>nothing b/c HEAD==file</li>,
   data-fragment-index=5,
   position: absolute; bottom: -10,
   fade-in-then-out)}}}

{{{mpoll(<tt>commit</tt> changes,
   <li>nothing</li><li>file (cat)</li><li>git HEAD</li><li>file and HEAD</li>,
   data-fragment-index=6,
   position: absolute; bottom: -100,
   fade-in-then-out)}}}


#+REVEAL_HTML: </div>
* Fixing history
#+begin_quote
the Ultimate Question of Life, the Universe, and Everything
#+end_quote

[[file:git/deepthought.webp]]
** amend commit

#+REVEAL_HTML: <div class="column" style="float:left; width:50%; font-size:smaller">
  Initial answer with way too much confidence
  #+begin_src bash :session git1 :exports both
echo "41" > ans.txt
  #+end_src

  #+ATTR_REVEAL: :frag t :frag_idx 2
  #+begin_src bash :session git1 :exports both
git add ans.txt
git commit -m "41!"

git log --oneline
  #+end_src

{{{mpoll(git commands to track changes?,
   <li>commit+push</li>
   <li>add+commit</li>
   <li>init+commit</li>,
   data-fragment-index=1)}}}

#+REVEAL_HTML: </div><div class="column fragment" style="float:left; width:50%; font-size:smaller" data-fragment-index=3>
  We were wrong. But history doesn't have to know
  #+begin_src bash :session git1
echo "42" > ans.txt # update

git add ans.txt
git commit --amend # fix msg to 42
  #+end_src

  #+begin_src bash :session git1 :exports none
# here for presenter to actually commit
git commit --amend -m "ans is 42!"
  #+end_src

  #+begin_src bash :session git1 :exports both
git log --oneline
  #+end_src

#+REVEAL_HTML: </div>

** fix message
Don't need an add to adjust a message
  #+begin_src bash :session git1 :exports both
git commit --amend -m "Hitchhikers reference"
git log --oneline
  #+end_src


** Why?
  * running "WIP" tracking changes so they don't get lost
  * keep history clean for blame, rebasing, bisecting
  * fix github CI (pages) without a million commits

** push -f

If this repo was on github and you pushed before amending, you'll need to force your push.
#+begin_src bash :eval never
git push -f
#+end_src

** Note on adding

#+begin_src bash
git show HEAD:ans.txt # same as cat ans.txt
#+end_src

#+begin_src bash
echo 100 >> ans.txt
git diff
#+end_src

Will this diff be from HEAD?
#+begin_src bash
git add ans.txt
echo 200 >> ans.txt
git diff
#+end_src

If add's tracking the changes, why ever commit?

* rebase
rebase can move and combine commits. Useful for branches.

*** Fixup (squash)

* Bonus

** git blame
#+begin_src bash
git blame -- myfile.txt
#+end_src


* That's all
#+begin_src bash :eval never
git commit --amend --no-edit
#+end_src
